//
//  main.swift
//  hardBanking
//
//  Created by apple on 19.09.2023.
//

import Foundation

// 1. –í—Ä–µ–º–µ–Ω–∞ –≥–æ–¥–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞

enum SeasonOfYears {
    case winter, spring, summer, fall
    
    
    func middleTemperature () -> Int {
        switch self {
        case .fall:
            return 17
        case .spring:
            return 14
        case .summer:
            return 29
        case .winter:
            return 6
        }
    }
    
    var translate : String {
        switch self {
        case .winter:
           return "–ó–∏–º–∞"
        case .spring:
           return "–í–µ—Å–Ω–∞"
        case .summer:
           return "–õ–µ—Ç–æ"
        case .fall:
           return "–û—Å–µ–Ω—å"
        }
    }
    
    var computeProperty : String{
        switch self {
        case .winter:
            return "–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ \(translate) —Å–æ—Å—Ç–æ–≤–ª–µ—è–µ—Ç \(middleTemperature())"
        case .spring:
            return "–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ \(translate) —Å–æ—Å—Ç–æ–≤–ª–µ—è–µ—Ç \(middleTemperature())"
        case .summer:
            return "–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ \(translate) —Å–æ—Å—Ç–æ–≤–ª–µ—è–µ—Ç \(middleTemperature())"
        case .fall:
            return "–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ \(translate) —Å–æ—Å—Ç–æ–≤–ª–µ—è–µ—Ç \(middleTemperature())"
        }
    }
    
}

// 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö

enum Transport {
    case bike, airplane
    enum Automobile{
        case sedan,bus,crossover,jeep,sportcar
        var maxSpeed: String {
            switch self{
            case .sedan:
                return "300 –∫–º/—á"
            case .bus:
                return "90 –∫–º/—á"
            case .crossover:
                return "280 –∫–º/—á"
            case .jeep:
                return "220 –∫–º/—á"
            case .sportcar:
                return "360 –∫–º/—á"
            }
        }
    }
    enum Train{
        case passanger, express
        var maxSpeed: String {
            switch self{
            case .passanger:
                return "140 –∫–º/—á"
            case .express:
                return "330 –∫–º/—á"
            }
        }
    }
    
    var maxSped: String{
        switch self {
        case .bike:
            return "40 –∫–º/—á"
        case .airplane:
            return "400 –∫–º/—á"
        }
    }
}

func searchMaxSpeed(){
    let bike = Transport.bike
    let airplane = Transport.airplane
    print("–í—ã –≤–æ—à–ª–∏ –≤ –±–∞–∑—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞üöÄ")
    print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç : ")
    print("1.–ê–≤—Ç–æ–±–∏–ª—å\n2.–í–µ–ª–æ—Å–∏–ø–µ–¥\n3.–°–∞–º–æ–ª–µ—Ç\n4.–ü–æ–µ–∑–¥")
    let userChoice = readLine() ?? "Error Choice"
    switch userChoice{
    case "1":
        print("–ö–∞–∫–æ–π –≤–∏–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É –≤–∞—Å?\n1.–°–µ–¥–∞–Ω\n2.–ê–≤—Ç–æ–±—É—Å\n3.–ö—Ä–æ—Å—Å–æ–≤–µ—Ä\n4.–î–∂–∏–ø\n5.–°–ø–æ—Ä—Ç–∫–∞—Ä")
        let userChoice2 = readLine() ?? "Error Choice Avto"
        switch userChoice2{
        case "1":
            let userAvto = Transport.Automobile.sedan
            print(userAvto.maxSpeed)
        case "2":
            let userAvto = Transport.Automobile.bus
            print(userAvto.maxSpeed)
        case "3":
            let userAvto = Transport.Automobile.crossover
            print(userAvto.maxSpeed)
        case "4":
            let userAvto = Transport.Automobile.jeep
            print(userAvto.maxSpeed)
        case "5":
            let userAvto = Transport.Automobile.sportcar
            print(userAvto.maxSpeed)
        default:
            print("Error")
        }
    case "2":
        print(bike.maxSped)
    case "3":
        print(airplane.maxSped)
    case "4":
        print("–ö–∞–∫–æ–π –ø–æ–µ–∑–¥ –≤—ã –∏–º–µ—Ç–µ–µ –≤ –≤–∏–¥—É?\n1.–ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π\n2.–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π")
        let userChoice2 = readLine() ?? "Error Choice Avto"
        switch userChoice2{
        case "1":
            let userTrain = Transport.Train.passanger
            print(userTrain.maxSpeed)
        case "2":
            let userTrain = Transport.Train.express
            print(userTrain.maxSpeed)
        default:
            print("Error")
        }
    default:
        print("Error")
    }
}


// 3. –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞

let toDay = Date()
// –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–æ—Ä –¥–∞—Ç
let dateFormatter = DateFormatter()
dateFormatter.dateStyle = .short
dateFormatter.timeStyle = .full
let dateString = dateFormatter.string(from: toDay)

func howMuchPay() -> String{
    print("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ : ")
    let moneyValue = readLine() ?? "Error"
    return moneyValue
}

enum PaymentStatuse{
    case notPaid, inProccesing, paid(Int), paymentError
    
    var payInformation: String {
        switch self {
        case .notPaid:
            return "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
        case .inProccesing:
            return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã"
        case .paid(let howMuch):
            return "\(howMuch) —Ä—É–±–ª–µ–π –æ–ø–ª–∞—á–µ–Ω–æ \(dateString)"
        case .paymentError:
            return payStatuseError()
        }
    }
}

func payStatuseError() -> String {
    let notHaveMoney = "–ù–∞ —Å—á–µ—Ç—É –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
    let errorServer = "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"
    
    let isBecouse = Bool.random()
    
    return isBecouse ? notHaveMoney : errorServer
}

let pay = PaymentStatuse.paid(100)
print(pay.payInformation)


// 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º–∞–º–∞ –∫–∞–º–µ—Ä—ã

enum CameraMode{
    case auto, portret, landshaft, night
    
    var recomedationForUse: String{
        switch self {
        case .auto:
            return "–ê–≤—Ç–æ—Ä–µ–∂–∏–º, –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å, —Ñ–æ—Ç–∫–∞–π—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ"
        case .portret:
            return "–î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É —á—É—Ç—å –¥–æ–ª—å—à–µ, –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞"
        case .landshaft:
            return "–°–Ω–∏–º–∞–µ—Ç –∑–∞–¥–Ω–∏–π —Ñ–æ–Ω, –∏ –¥–∞–ª—å–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã"
        case .night:
            return "–ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º —Å –¥–æ–ª–≥–æ–π –≤—ã–¥–µ—Ä–∂–∫–æ–π. –î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ –æ–±—ä–µ–∫—Ç–µ, –Ω–µ –æ—Ç–≤–æ–¥–∏—Ç–µ —Å—Ä–∞–∑—É"
        }
    }
}

let cameraUser = CameraMode.night


// 5. –î–∏–µ—Ç—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –∑–æ–æ–ø–∞—Ä–∫–µ
enum AnimalType{
    case predator, herbivore, insect
    
    var whatEat : [String] {
        switch self {
        case .predator:
            return ["–†—ã–±–∞","–ú—è—Å–æ"]
        case .herbivore:
            return ["–¢—Ä–∞–≤–∞","–†–∞—Å—Ç–µ–Ω–∏—è","–§—Ä—É–∫—Ç—ã","–û–≤–æ—â–∏"]
        case .insect:
            return ["–¢—Ä–∞–≤–∞","–û—Å—Ç–∞–Ω–∫–∏"]
        }
    }
}

let lion = AnimalType.predator
print(lion.whatEat)

// 6. –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ

enum OrderStatuse{
    case accepted, gettingReady, ready, delivered
    var translate: String{
        switch self {
        case .accepted:
            return "–ü—Ä–∏–Ω—è—Ç"
        case .gettingReady:
            return "–ì–æ—Ç–æ–≤–∏—Ç—Å—è"
        case .ready:
            return "–ì–æ—Ç–æ–≤"
        case .delivered:
            return "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"
        }
    }
    var alacrity: OrderStatuse {
        switch self {
        case .accepted:
            print("–í–∞—à –∑–∞–∫–∞–∑ \n\(translate)\n–°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å")
            return .gettingReady
        case .gettingReady:
            print("–í–∞—à –∑–∞–∫–∞–∑ \n\(translate)\n–°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å")
            return .ready
        default:
            print("–í–∞—à –∑–∞–∫–∞–∑ \n\(translate)\n–°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å")
            return .delivered
        }
    }
}

let order = OrderStatuse.gettingReady
print(order.alacrity.translate)

// 7. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–∞—Ö –≤ –æ—Ç–µ–ª–µ

enum RoomType{
    case single, luxury, double
    
    var price : String{
        switch self {
        case .single:
            return "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π - 20$ —Å—É—Ç–∫–∏"
        case .luxury:
            return "–≠—Ç–æ—Ç —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –Ω–æ–º–µ—Ä - 190$ —Å—É—Ç–∫–∏"
        case .double:
            return "–°—Ç–æ–∏–º–æ—Å—Ç—å 2–º–µ—Å—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ - 100$ —Å—É—Ç–∫–∏"
        }
    }
    
    var booking : String{
        switch self {
        case .single:
            return "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–≤–æ–±–æ–¥–Ω–æ 3 –Ω–æ–º–µ—Ä–∞"
        case .luxury:
            return "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–≤–æ–±–æ–¥–Ω–æ 19 –Ω–æ–º–µ—Ä–æ–≤"
        case .double:
            return "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–≤–æ–±–æ–¥–Ω–æ 10 –Ω–æ–º–µ—Ä–æ–≤"
        }
    }
}

let yourRoom = RoomType.double
print("\(yourRoom.booking).\(yourRoom.price)")

// 8. –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∏–≥—Ä–µ
enum DifficultyLevel{
    case easy, middle, hard, master
    
    var enemyStrong: String{
        switch self {
        case .easy:
            return "–°–ª–∞–±—ã–µ –º–æ–±—ã"
        case .middle:
            return "–ú–æ–±—ã —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
        case .hard:
            return "–ú–æ–±—ã —Å–∏–ª—å–Ω—ã–µ, —É–º–µ—é—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –º–∞–≥–∏–µ–π"
        case .master:
            return "–°–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ –º–æ–±—ã, –æ–±–ª–∞–¥–∞—é—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–µ–∫—Ç–æ–º. –ú–æ–≥—É—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∏–≥—Ä—ã. –ú–æ–±—ã –º–æ–≥—É—Ç —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Ç–∞–∫–∂–µ –æ–±–ª–∞–¥–∞—é—Ç —É—Å—Ç–æ–π—á–µ–≤–æ—Å—Ç—å—é –∫ –ø–æ–≥–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º"
        }
    }
    var enemyMuch: String{
        switch self {
        case .easy:
            return "–ú–æ–±–æ–≤ 3-4 –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"
        case .middle:
            return "10-15 –ú–æ–±–æ–≤ –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"
        case .hard:
            return "30-40 –ú–æ–±–æ–≤ –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"
        case .master:
            return "–ú–æ–±—ã –ø–æ–≤—Å—é–¥—É"
        }
    }
    var leadTime: String {
        switch self {
        case .easy:
            return "–ù–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ —É –≤–∞—Å 5 –º–∏–Ω—É—Ç"
        case .middle:
            return "–ù–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ 3 –º–∏–Ω—É—Ç—ã"
        case .hard:
            return "–ù–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ —É –≤–∞—Å 2 –º–∏–Ω—É—Ç—ã"
        case .master:
            return "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏"
        }
    }
}

let gamerDifficulty = DifficultyLevel.easy
print("\(gamerDifficulty.enemyMuch).\(gamerDifficulty.enemyStrong).\(gamerDifficulty.leadTime)")


// 9. –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
enum Cloudiness{
    case —è—Å–Ω–æ, —á–∞—Å—Ç–∏—á–Ω–∞—è–û–±–ª–∞—á–Ω–æ—Å—Ç—å, –æ–±–ª–∞—á–Ω–æ, –ø–∞—Å–º—É—Ä–Ω–æ
    
    var probability : String{
        switch self {
        case .—è—Å–Ω–æ:
            return "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è 0-5%"
        case .—á–∞—Å—Ç–∏—á–Ω–∞—è–û–±–ª–∞—á–Ω–æ—Å—Ç—å:
            return "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è 15-30%"
        case .–æ–±–ª–∞—á–Ω–æ:
            return "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è 30-40%"
        case .–ø–∞—Å–º—É—Ä–Ω–æ:
            return "–í–µ—Ä–æ—è—Ç–Ω–æ—Ç—Å—å –¥–æ–∂–¥—è 50-70%"
        }
    }
}

let wether = Cloudiness.–æ–±–ª–∞—á–Ω–æ
print(wether.probability)

// 10. –¶–µ–Ω–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤ –≤ –∞–≤—Ç–æ–º–∞—Ç–µ

enum DrinkType{
    case coffee, tea, hotChokolate, water
    
    var price : Int {
        switch self {
        case .coffee:
            return 150
        case .tea:
            return 100
        case .hotChokolate:
            return 120
        case .water:
            return 70
        }
    }
    
    var translate: String{
        switch self {
        case .coffee:
            return "–ö–æ—Ñ–µ"
        case .tea:
            return "–ß–∞–π"
        case .hotChokolate:
            return "–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥"
        case .water:
            return "–í–æ–¥–∞"
        }
    }
    
    var priceInfo : String{
        switch self {
        case .coffee:
            return "\(translate) —Å—Ç–æ–∏—Ç \(price)"
        case .tea:
            return "\(translate) —Å—Ç–æ–∏—Ç \(price)"
        case .hotChokolate:
            return "\(translate) —Å—Ç–æ–∏—Ç \(price)"
        case .water:
            return "\(translate) —Å—Ç–æ–∏—Ç \(price)"
        }
    }
}

let drink = DrinkType.coffee
print(drink.priceInfo)
